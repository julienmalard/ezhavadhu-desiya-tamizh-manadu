import os

import xarray as xr
from tikon.central import Modelo
from tikon.central.calibs import EspecCalibsCorrida
from tikon.central.tiempo import Tiempo
from tikon.móds.manejo import Manejo, Regla
from tikon.móds.manejo.conds import CondDía
from tikon.móds.rae.manejo import AgregarPob, MultPob
from tikon.móds.rae.orgs.organismo import EtapaFantasma
from tikon.móds.rae.utils import EJE_ETAPA
from tikon.utils import asegurar_dir_existe

from மாதிரி import வலை, வயில்_அ, கருந்தலைப்புழு, புழு_ஒட்டுண்ணி, கூட்டுப்புழு_ஒட்டுண்ணி

"""
கட்டுரையில் அனைத்து உபயோகிக்கப்பட்ட உருவகப்படுத்துதல்கள் இந்த குறியீட்டில் வரையறுப்பட்டுள்ளன. உருவகப்படுத்துதல்கள் இந்த
குறியீட்டால் நேரடியாக செயல்படுக்காது. இந்த குறியீட்டில் `பகுப்பாய்வு.py` என்று கோப்புக்காக தேவையான் உருவகப்படுத்துதல்களின்
அமைப்புகள் குறிப்பிடுகிறது. உருவகப்படுத்துதல்களின் விளைவுகளை உபயோகிக்கும் பொழுது, பொறுத்தமான உஉருகவப்படுத்துதலை
தானாக செயல்படும்.
அனைத்து உருவகப்படுத்துதல் அமைப்புகள் இந்த கோப்பிலே குறிப்பிடப்படும்.
"""

# உருவகப்படுத்துதலின் அமைப்புகள்
முதல்_தேதி = '1982-04-01'
இறுதியான_நாள் = 400
நேரம் = Tiempo(முதல்_தேதி, இறுதியான_நாள்)
மறு_உருவகப்படுத்துதல்கள் = {'paráms': 70, 'estoc': 5}

உகப்பாகம்_மறுசெய்கை_எண் = 500
உகப்பாகம்_சேமிக்கும்_எண் = 10

உகப்பாகம்_நாட்கள் = (25, 150)
எனக்கு_பேசவம் = True
வெளியீடு_கோப்புரை = 'வெளியீடு/உருவகப்படத்துதல்கள்'
if not os.path.isdir(வெளியீடு_கோப்புரை):
    os.mkdir(வெளியீடு_கோப்புரை)

# மாறிலிகள்
ஒட்டுண்ணி_அளவு = 300000

பொ_சே_கோ = 655757.1429 * 0.5  # பயிர் பொருளாதார சேத கோடு
உயிர்வாழ்தல் = 0.05  # பூச்சிக்கொல்லி எதிரில் உயிர்வாழ்தல்

# அளவீடுகளை எற்று
வலை.cargar_calibs('வெளியீடு/வயில் அ அளவீடு/red')
வயில்_அ.cargar_calibs('வெளியீடு/வயில் அ அளவீடு')

# எல்லை வாழ்க்கை
படிகள் = வலை.etapas

# "பெய்" அதாவது தீக்கோன் நிரலில் ஒட்டுண்ணியாக்கப்பட்ட பூச்சிகளின் படிகள்.
ஒட்டுண்ணியாக்கப்பட்டாத_குடம்பிகள் = [ப for ப in படிகள் if ப.org is கருந்தலைப்புழு and 'juvenil' in ப.nombre]
குடம்பி_பெய் = [ப for ப in படிகள் if isinstance(ப, EtapaFantasma) and ப.etp_hués in ஒட்டுண்ணியாக்கப்பட்டாத_குடம்பிகள்]
கூட்டுப்புழு_பெய் = [ப for ப in படிகள் if isinstance(ப, EtapaFantasma) and ப.etp_hués == கருந்தலைப்புழு['pupa']]

# குறிப்பான வாழ்க்கை படிகளுக்காக சொலபான அணுகல்
குடம்பிகள் = ஒட்டுண்ணியாக்கப்பட்டாத_குடம்பிகள் + குடம்பி_பெய்
முதிர்நிலை = [ப for ப in படிகள் if ப.nombre == 'adulto']
கூட்டுப்புழு = [கருந்தலைப்புழு['pupa']] + கூட்டுப்புழு_பெய்
முட்டை_தவிர = [ப for ப in படிகள் if ப.nombre != 'huevo']


def உரைக்கு(விளைவு):
    விளைவு.coords[EJE_ETAPA] = [str(இ) for இ in விளைவு.coords[EJE_ETAPA].values]
    return விளைவு


def படி_பொருளுக்கு(விளைவு):
    விளைவு.coords[EJE_ETAPA] = [next((ப for ப in படிகள் if str(ப) == ம), ம) for ம in விளைவு.coords[EJE_ETAPA].values]
    return விளைவு


def குடம்பி_பெறு(இ):
    """
    மாறியின் கருந்தலைப்புழுவின் குடம்பி படிகள் திருப்பி கொடுக்கிறது

    Parameters
    ----------
    இ: list or int
        ஆர்வமுள்ள குடம்பி படிகளின் எண்களின் பட்டியல் (௧ - ௫).

    Returns
    -------
    list
        குடம்பி படி பொருட்கள், ஒட்டுண்ணியாக்கப்பட்ட (பெய்) படிகள் உட்பட.
    """
    if isinstance(இ, int):
        இ = [இ]

    படிகள்_ = [
                  ஈ for ஈ in ஒட்டுண்ணியாக்கப்பட்டாத_குடம்பிகள் if any(ஈ.nombre.endswith('juvenil %i' % ஏ) for ஏ in இ)
              ] + [
                  ஈ for ஈ in குடம்பி_பெய் if any(ஈ.etp_hués.nombre.endswith('juvenil %i' % ஏ) for ஏ in இ)
              ]
    return படிகள்_


class எளிய_உருவகப்படுத்துதல்(object):
    """
    எளிய உருவகப்படுத்துதலுக்காக ஒரு வகை.
    """

    def __init__(தன், பெயர், மேலாண்மை, அனைத்து_மாறிகள்=False):
        """
        உருவகப்படுத்துதலின் குறிப்பை துவக்கப்படும்.

        Parameters
        ----------
        பெயர்: str
            உருவகப்படுத்துதலின் பெயர் (வெளியீடு இந்த பெயருடன் எழுதப்படும்).
        மேலாண்மை: Manejo
            உருவகப்படுத்துதலுக்காக மேலாண்மை.
        அனைத்து_மாறிகள்: bool
            வெளியீட்டில் அனைத்து மாறிகள் சேர்க்கவுமா?
        """

        தன்.மேலாண்மை = மேலாண்மை
        தன்.பெயர் = பெயர்
        தன்.அனைத்து_மாறிகள் = அனைத்து_மாறிகள்

    def தகவல்களை_பெறு(தன், படி=None):
        """
        உருவகப்படுத்துதலின் வெளியீடு தகவல்கள் பெறும். உருவகப்படுத்துதல் இப்பொழுது வரை செயல்பட்டதில்லை என்றால்,
        முதலில் அதை செயல்படுத்தும். இல்லையென்னில், முன்னால் செயல்பட்ட உருவகப்படுத்துதலின் சேமிக்கப்பட்ட வெளியீட்டை
        படித்து உபயோகிக்கும்.

        Parameters
        ----------
        படி: str | list
            வேண்டிய படிகள் (விருப்பமானது).
        Returns
        -------
        xr.DataArray
            வெளியீடுகள்
        """

        கோப்புபெயர் = தன்._வெளியீடு_கோப்பு_பெயரை_பெறு()
        # கோப்பு கிடைத்ததில்லை என்றால், உருவகப்படுத்துதலை செயல்படுத்தவும்.
        if not os.path.isfile(கோப்புபெயர்):
            உருவகப்படுத்துதல்_செய்யு((கோப்புபெயர், (வலை, தன்.மேலாண்மை), தன்.அனைத்து_மாறிகள்))

        # விளைவுகளை திருப்பி கொடு
        if படி is None:
            return xr.open_dataarray(கோப்புபெயர்)
        return xr.open_dataarray(கோப்புபெயர்).loc[{EJE_ETAPA: படி}]

    def _வெளியீடு_கோப்பு_பெயரை_பெறு(தன்):
        """
        உருவகப்படுத்துதலின் வெளியீடு கோப்பு பெயர்.

        Returns
        -------
        str
        """

        return f'{வெளியீடு_கோப்புரை}/{தன்.பெயர்}.nc'


def உருவகப்படுத்துதல்_செய்யு(*மாறிகள்):
    மாறிகள் = மாறிகள்[0]
    if len(மாறிகள்) == 2:
        கோப்புபெயர், தொகுப்புகள் = மாறிகள்
        அனைத்தது = False
    else:
        கோப்புபெயர், தொகுப்புகள், அனைத்தது = மாறிகள்

    if எனக்கு_பேசவம் and கோப்புபெயர்:
        print(f'{கோப்புபெயர்} இன் உருவகப்படுத்துதல் நடந்து கொண்டு இருக்கிறது')

    மாதிரி = Modelo(தொகுப்புகள்)
    விளைவுகள் = மாதிரி.simular(
        இறுதியான_நாள், reps=மறு_உருவகப்படுத்துதல்கள், exper=வயில்_அ, t=நேரம்,
        calibs=EspecCalibsCorrida(aprioris=False)
    )

    இறுதியான_விளைவு = process_results(விளைவுகள்[str(வயில்_அ)]['red']['Pobs'].res, அனைத்தது=அனைத்தது)

    if கோப்புபெயர் is None:
        return இறுதியான_விளைவு
    asegurar_dir_existe(கோப்புபெயர்)
    உரைக்கு(இறுதியான_விளைவு).to_netcdf(கோப்புபெயர்)


def process_results(விளைவு, அனைத்தது=False):
    # உரைக்கு மாற்று திருப்பி படிக்கு மாற்றவும். என்னென்றால் இணையான செயல்படுத்தல்கள் செய்யும் பொழுது,
    # `etapa` என்று அச்சின் மதிப்புகளும் `ஒட்டுண்ணியாக்கப்பட்டாத_குடம்பிகள்` என்று மாறியில் உள்ள
    # படிகளும் ஒரே தான் இருக்கவும்.
    விளைவு = படி_பொருளுக்கு(உரைக்கு(விளைவு.copy()))

    # ஒட்டுண்ணிக்கப்பட்ட குடம்பி படிகள் ஏற்கனவே சாதாரண படிகளுக்கு சேர்க்கப்பட்டுள்ளன்.
    இறுதியானது = விளைவு.loc[{EJE_ETAPA: ஒட்டுண்ணியாக்கப்பட்டாத_குடம்பிகள்}].sum(dim=EJE_ETAPA).expand_dims(
        {EJE_ETAPA: ['அனைத்து குடம்பி']})

    if அனைத்தது:
        return xr.concat([இறுதியானது, விளைவு], dim=EJE_ETAPA)
    return இறுதியானது


# எளிய உருவகப்படுத்துதல்கள்
அடிப்படை_உருவகப்படுத்துதல் = எளிய_உருவகப்படுத்துதல்('கட்டுபாடு இல்லாமல்', மேலாண்மை=Manejo())
உயிர்கட்டுப்பாடு_கூட்டுப்புழு_எளிய_உருவகப்படுத்துதல் = எளிய_உருவகப்படுத்துதல்(
    'எளிய உயிர் கட்டுப்பாடு கூட்டுப்புழு',
    மேலாண்மை=Manejo(
        Regla(CondDía(15), AgregarPob(
            கூட்டுப்புழு_ஒட்டுண்ணி['adulto'],
            ஒட்டுண்ணி_அளவு))
    ))
உயிர்கட்டுப்பாடு_குடம்பி_எளிய_உருவகப்படுத்துதல் = எளிய_உருவகப்படுத்துதல்(
    'எளிய உயிர் கட்டுப்பாடு குடம்பி',
    மேலாண்மை=Manejo(
        Regla(CondDía(15),
              AgregarPob(புழு_ஒட்டுண்ணி['adulto'],
                         ஒட்டுண்ணி_அளவு))
    ))
முட்டை_தவிர_பூச்சிக்கொல்லி_எளிய_உருவகப்படுத்துதல் = எளிய_உருவகப்படுத்துதல்(
    'எளிய பூச்சிக்கொல்லி முட்டை தவிர',
    மேலாண்மை=Manejo(
        Regla(CondDía(15),
              MultPob([s for s in முட்டை_தவிர],
                      உயிர்வாழ்தல்))
    ))
